Author: Muhammad Yousuf Ahmad
Date:   September 20, 2015

COMP 512: Distributed Systems
School of Computer Science
McGill University

A Distributed System in Java using Web Services.
Adapted from CSE 593, University of Washington.

==========

Project Structure:

 + build                          generated by ant
   + classes                        generated code and compiled classes
   + war                            deployable web services

 + etc                            configuration
   - server.policy                  server security policy

 + lib                            jar libraries

 + src                            source code
   + main                           server start point
     - Main.java                      embedded Tomcat launcher
   + client                         client code
     - Client.java                    client CLI
     - WSClient.java                  web service proxy wrapper
   + server                         server code
     + ws                             web service
       - sun-jaxws.xml                  RM service endpoint mapping
       - web.xml                        RM service deployment settings
       - ResourceManager.java           resource manager API
     - ResourceManagerImpl.java       resource manager implementation
     - *.java
   + middleware                       middleware code
     + ws                             web service
       - sun-jaxws.xml                  middleware service endpoint mapping
       - web.xml                        middleware service deployment settings
     - ResourceManagerImpl.java       middleware implementation (empty)

 + webapps                        generated by ant
   + flight                         deployed web service: flights
   + car                            deployed web service: cars
   + room                           deployed web service: rooms
   + mw                             deployed web service: middleware

 - build.xml                      ant build configuration
 - README.txt                     this file

==========

Ant Targets:

 - clean                          deletes directories: build and webapps
 - setup                          creates directories: build and webapps
 - build-server                   processes annotations and compiles server
 - create-server-war              creates deployable web service
 - deploy-war                     deploys war to webapps directory
 - build-main                     builds Main.java
 - start-tomcat                   launches embedded Tomcat
 - server                         builds, deploys, and launches server
 - generate-client                generates proxy classes from web service wsdl
 - build-client                   compiles client code
 - client                         builds and launches client
 - build-middleware               processes annotations and compiles middleware
 - create-middleware-war          creates deployable web service
 - middleware                     builds, deploys, and launches middleware

Ant Properties:

 - ${service.name}                name of web service (default: rm)
 - ${service.host}                hostname/IP of server (default: localhost)
 - ${service.port}                web service port binding (default: 8080)

Note that you may either modify these properties directly within build.xml,
or specify any of them when launching ant from the command line (as below).

==========

Instructions:

1. Clean your setup.

   [userx][lab1-1][p1]  ant clean

2. Build the general RM service interface and endpoint.

   [userx][lab1-1][p1]  ant build-server

3. Launch the specialized RM services, preferably on separate server machines.
   For initial testing, you may run them all on the same machine.

   [userx][lab1-1][p1]  ant server -Dservice.name=flight -Dservice.port=8081

   [userx][lab1-2][p1]  ant server -Dservice.name=car -Dservice.port=8082

   [userx][lab1-3][p1]  ant server -Dservice.name=room -Dservice.port=8083

   Make sure you use unique port numbers to avoid port conflicts with other
   services that may already be running on the same machine.

   You may use your group number as a prefix. For example:
     Group 1: 1081; Group 8: 8081; Group 10: 10081; Group 18: 18081

4. Build the client interface.

   [userx][lab1-4][p1]  ant build-client -Dservice.name=flight
                                         -Dservice.host=lab1-1
                                         -Dservice.port=8081

5. Launch a test client on the client machine to test the flight RM.

   [userx][lab1-4][p1]  ant client -Dservice.name=flight
                                   -Dservice.host=lab1-1
                                   -Dservice.port=8081

   Make sure you specify a service name/host/port combination from step 3.

6. Run some test commands on the client.

     [java] Client Interface
     [java] Type "help" for list of supported commands

   newflight,1,1,1,1
     [java] Adding a new Flight using id: 1
     [java] Flight number: 1
     [java] Add Flight Seats: 1
     [java] Set Flight Price: 1
     [java] Flight added

   queryflight,1,1
     [java] Querying a flight using id: 1
     [java] Flight number: 1
     [java] Number of seats available: 1

   If it works, you will see corresponding log messages on the related server:

     [java] http-nio-8080-exec-1 INFO: RM::addFlight(1, 1, $1, 1)
     [java] http-nio-8080-exec-1 INFO: RM::addFlight(1, 1, $1, 1) OK.
     [java] http-nio-8080-exec-1 INFO: RM::queryNum(1, flight-1)
     [java] http-nio-8080-exec-1 INFO: RM::queryNum(1, flight-1) OK: 1

7. Configure the middleware service using src/middleware/ws/web.xml.
   Point it to the specialized RM services launched in step 3. For example:

   <env-entry>
        <env-entry-name>flight-service-name</env-entry-name>
        <env-entry-value>flight</env-entry-value>
        <env-entry-type>java.lang.String</env-entry-type>
    </env-entry>
    <env-entry>
        <env-entry-name>flight-service-host</env-entry-name>
        <env-entry-value>lab1-1</env-entry-value>
        <env-entry-type>java.lang.String</env-entry-type>
    </env-entry>
    <env-entry>
        <env-entry-name>flight-service-port</env-entry-name>
        <env-entry-value>8081</env-entry-value>
        <env-entry-type>java.lang.Integer</env-entry-type>
    </env-entry>

8. Build the middleware endpoint.

   [userx][lab1-1][p1]  ant build-middleware

   Make sure you already built the client (step 4) before this step.
   The middleware uses the client code to connect to the RMs.

9. Launch the middleware service on its own machine.

   [userx][lab1-5][p1]  ant middleware -Dservice.name=mw -Dservice.port=8080

10. Launch a middleware client on the client machine.

    [userx][lab1-4][p1]  ant client -Dservice.name=mw
                                    -Dservice.host=lab1-5
                                    -Dservice.port=8080

    Make sure you specify the service name/host/port combination from step 9.

11. Run some test commands on the middleware client.

    If it works, you will see corresponding log messages on the middleware.
    You should see RM operations being forwarded to their corresponding RM servers.

